import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/canvas-gauges/gauge.min.js
var require_gauge_min = __commonJS({
  "node_modules/canvas-gauges/gauge.min.js"(exports, module) {
    !function(e) {
      "use strict";
      function t(e2, t2) {
        if (!e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t2 || "object" != typeof t2 && "function" != typeof t2 ? e2 : t2;
      }
      function i(e2, t2) {
        if ("function" != typeof t2 && null !== t2) throw new TypeError("Super expression must either be null or a function, not " + typeof t2);
        e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, enumerable: false, writable: true, configurable: true } }), t2 && (Object.setPrototypeOf ? Object.setPrototypeOf(e2, t2) : e2.__proto__ = t2);
      }
      function r(e2, t2) {
        if (!(e2 instanceof t2)) throw new TypeError("Cannot call a class as a function");
      }
      function n(e2, t2) {
        if (t2 || (t2 = "undefined" == typeof window ? global : window), void 0 !== t2[e2]) return t2[e2];
        for (var i2 = ["webkit", "moz", "ms", "o"], r2 = 0, n2 = i2.length, o2 = e2.charAt(0).toUpperCase() + e2.substr(1); r2 < n2; r2++) {
          var a2 = t2[i2[r2] + o2];
          if (void 0 !== a2) return a2;
        }
        return null;
      }
      function o(e2, t2, i2, r2, n2, a2, l2) {
        if ("function" != typeof r2) throw new TypeError("Invalid animation rule:", r2);
        var s2 = e2 - i2, d2 = s2 / n2, u2 = 0;
        d2 > 1 && (d2 = 1), 1 !== d2 && (u2 = r2(d2), isFinite(u2) && !isNaN(u2) && (d2 = u2)), t2 && t2(d2), s2 < n2 ? l2.frame = U(function(e3) {
          return o(e3, t2, i2, r2, n2, a2, l2);
        }) : (a2 && a2(), l2.inProgress = false);
      }
      function a() {
        Array.prototype.constructor.apply(this, arguments);
      }
      function l(e2) {
        if (!(e2 instanceof DOMException && 2152923147 === e2.result)) throw e2;
      }
      function s(e2, t2) {
        return t2.replace(ee, function(t3, i2) {
          var r2 = e2[i2];
          return void 0 !== r2 ? r2 : t3;
        });
      }
      function d(e2) {
        return e2.majorTicks instanceof Array || (e2.majorTicks = e2.majorTicks ? [e2.majorTicks] : []), e2.majorTicks.length || (e2.majorTicks.push(te.formatMajorTickNumber(e2.minValue, e2)), e2.majorTicks.push(te.formatMajorTickNumber(e2.maxValue, e2))), ["right" !== e2.tickSide, "left" !== e2.tickSide];
      }
      function u(e2, t2, i2, r2, n2, o2) {
        e2.beginPath(), e2.moveTo(t2 + o2, i2), e2.lineTo(t2 + r2 - o2, i2), e2.quadraticCurveTo(t2 + r2, i2, t2 + r2, i2 + o2), e2.lineTo(t2 + r2, i2 + n2 - o2), e2.quadraticCurveTo(t2 + r2, i2 + n2, t2 + r2 - o2, i2 + n2), e2.lineTo(t2 + o2, i2 + n2), e2.quadraticCurveTo(t2, i2 + n2, t2, i2 + n2 - o2), e2.lineTo(t2, i2 + o2), e2.quadraticCurveTo(t2, i2, t2 + o2, i2), e2.closePath();
      }
      function c(e2, t2) {
        var i2 = t2.valueDec, r2 = t2.valueInt, n2 = 0, o2 = void 0, a2 = void 0, l2 = void 0;
        if (e2 = parseFloat(e2), l2 = e2 < 0, e2 = Math.abs(e2), i2 > 0) {
          for (a2 = e2.toFixed(i2).toString().split("."), o2 = r2 - a2[0].length; n2 < o2; ++n2) a2[0] = "0" + a2[0];
          a2 = (l2 ? "-" : "") + a2[0] + "." + a2[1];
        } else {
          for (a2 = Math.round(e2).toString(), o2 = r2 - a2.length; n2 < o2; ++n2) a2 = "0" + a2;
          a2 = (l2 ? "-" : "") + a2;
        }
        return a2;
      }
      function h(e2, t2) {
        var i2 = void 0, r2 = false;
        return i2 = 0 === t2.majorTicksDec ? Math.round(e2).toString() : e2.toFixed(t2.majorTicksDec), t2.majorTicksInt > 1 ? (r2 = ~i2.indexOf("."), ~i2.indexOf("-") ? "-" + [t2.majorTicksInt + t2.majorTicksDec + 2 + (r2 ? 1 : 0) - i2.length].join("0") + i2.replace("-", "") : [t2.majorTicksInt + t2.majorTicksDec + 1 + (r2 ? 1 : 0) - i2.length].join("0") + i2) : i2;
      }
      function f(e2) {
        return e2 * Math.PI / 180;
      }
      function v(e2, t2) {
        return { x: -e2 * Math.sin(t2), y: e2 * Math.cos(t2) };
      }
      function m(e2, t2, i2, r2) {
        var n2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, a2 = e2.createLinearGradient(n2 ? 0 : o2, n2 ? o2 : 0, n2 ? 0 : r2, n2 ? r2 : 0);
        return a2.addColorStop(0, t2), a2.addColorStop(1, i2), a2;
      }
      function g(e2, t2) {
        if (arguments.length > 2 && void 0 !== arguments[2] && arguments[2]) return e2.restore(), true;
        e2.save();
        var i2 = t2.borderShadowWidth;
        return i2 && (e2.shadowBlur = i2, e2.shadowColor = t2.colorBorderShadow), true;
      }
      function p(e2, t2) {
        t2.needleShadow && (e2.shadowOffsetX = 2, e2.shadowOffsetY = 2, e2.shadowBlur = 10, e2.shadowColor = t2.colorNeedleShadowDown);
      }
      function w(e2, t2, i2) {
        return e2["font" + t2 + "Style"] + " " + e2["font" + t2 + "Weight"] + " " + e2["font" + t2 + "Size"] * i2 + "px " + e2["font" + t2];
      }
      function b(e2) {
        e2.shadowOffsetX = null, e2.shadowOffsetY = null, e2.shadowBlur = null, e2.shadowColor = "", e2.strokeStyle = null, e2.lineWidth = 0, e2.save();
      }
      function y(e2, t2, i2, r2) {
        t2.valueTextShadow && (e2.shadowOffsetX = i2, e2.shadowOffsetY = i2, e2.shadowBlur = r2, e2.shadowColor = t2.colorValueTextShadow);
      }
      function x(e2, t2, i2, r2, n2, o2) {
        if (t2.valueBox) {
          b(e2);
          var a2 = t2.valueDec ? 1 + t2.valueDec : 0, l2 = "9".repeat(Math.max.apply(null, [String(parseInt(i2)).length + a2].concat(t2.majorTicks.map(function(e3) {
            return String(parseInt(e3, 10)).length + a2;
          })))), s2 = t2.valueText || c(i2, t2), d2 = o2 / 200, h2 = o2 / 100, f2 = 0.4 * h2, v2 = 1.2 * h2;
          e2.font = w(t2, "Value", d2), y(e2, t2, f2, v2);
          var m2 = e2.measureText(t2.valueText ? s2 : "-" + c(Number(l2), t2)).width;
          b(e2);
          var g2 = parseFloat(t2.fontValueSize) * d2 + f2 + v2, p2 = h2 * parseFloat(t2.valueBoxStroke), x2 = 2 * o2 - 2 * p2, k2 = m2 + 10 * h2, T2 = 1.1 * g2 + f2 + v2, S2 = h2 * t2.valueBoxBorderRadius, O2 = (parseFloat(t2.valueBoxWidth) || 0) / 100 * x2;
          O2 > k2 && (k2 = O2), k2 > x2 && (k2 = x2);
          var A2 = r2 - k2 / 2, V2 = n2 - T2 / 2, C2 = n2 - 5.75 * h2;
          if (e2.beginPath(), S2 ? u(e2, A2, V2, k2, T2, S2) : e2.rect(A2, V2, k2, T2), p2) {
            var P2 = e2.createRadialGradient(r2, C2, 10 * h2, r2, C2, 20 * h2);
            P2.addColorStop(0, t2.colorValueBoxRect), P2.addColorStop(1, t2.colorValueBoxRectEnd), e2.strokeStyle = P2, e2.lineWidth = p2, e2.stroke();
          }
          t2.colorValueBoxShadow && (e2.shadowBlur = 1.2 * h2, e2.shadowColor = t2.colorValueBoxShadow), t2.colorValueBoxBackground && (e2.fillStyle = t2.colorValueBoxBackground, e2.fill()), e2.closePath(), e2.restore(), y(e2, t2, f2, v2), e2.fillStyle = t2.colorValueText, e2.textAlign = "center", e2.textBaseline = "alphabetic", e2.fillText(s2, A2 + k2 / 2, n2 + T2 / 2 - g2 / 3), e2.restore();
        }
      }
      function k(e2) {
        var t2 = e2.value, i2 = e2.minValue, r2 = e2.maxValue, n2 = 0.01 * (r2 - i2);
        return { normal: t2 < i2 ? i2 : t2 > r2 ? r2 : t2, indented: t2 < i2 ? i2 - n2 : t2 > r2 ? r2 + n2 : t2 };
      }
      function T(e2, t2, i2, r2, n2) {
        i2.beginPath(), i2.arc(0, 0, $(e2), 0, 2 * ie, true), i2.lineWidth = t2, i2.strokeStyle = n2 ? te.linearGradient(i2, r2, n2, e2) : r2, i2.stroke(), i2.closePath();
      }
      function S(e2, t2) {
        var i2 = H.pixelRatio;
        return e2.maxRadius || (e2.maxRadius = e2.max - t2.borderShadowWidth - t2.borderOuterWidth * i2 - t2.borderMiddleWidth * i2 - t2.borderInnerWidth * i2 + (t2.borderOuterWidth ? 0.5 : 0) + (t2.borderMiddleWidth ? 0.5 : 0) + (t2.borderInnerWidth ? 0.5 : 0)), e2.maxRadius;
      }
      function O(e2, t2) {
        var i2 = H.pixelRatio, r2 = t2.borderShadowWidth * i2, n2 = e2.max - r2 - t2.borderOuterWidth * i2 / 2, o2 = n2 - t2.borderOuterWidth * i2 / 2 - t2.borderMiddleWidth * i2 / 2 + 0.5, a2 = o2 - t2.borderMiddleWidth * i2 / 2 - t2.borderInnerWidth * i2 / 2 + 0.5, l2 = S(e2, t2), s2 = void 0, d2 = false;
        e2.save(), t2.borderOuterWidth && (d2 = te.drawShadow(e2, t2, d2), T(n2, t2.borderOuterWidth * i2, e2, t2.colorBorderOuter, t2.colorBorderOuterEnd)), t2.borderMiddleWidth && (d2 = te.drawShadow(e2, t2, d2), T(o2, t2.borderMiddleWidth * i2, e2, t2.colorBorderMiddle, t2.colorBorderMiddleEnd)), t2.borderInnerWidth && (d2 = te.drawShadow(e2, t2, d2), T(a2, t2.borderInnerWidth * i2, e2, t2.colorBorderInner, t2.colorBorderInnerEnd)), te.drawShadow(e2, t2, d2), e2.beginPath(), e2.arc(0, 0, $(l2), 0, 2 * ie, true), t2.colorPlateEnd ? (s2 = e2.createRadialGradient(0, 0, l2 / 2, 0, 0, l2), s2.addColorStop(0, t2.colorPlate), s2.addColorStop(1, t2.colorPlateEnd)) : s2 = t2.colorPlate, e2.fillStyle = s2, e2.fill(), e2.closePath(), e2.restore();
      }
      function A(e2, t2) {
        var i2 = e2.max * (parseFloat(t2.highlightsWidth) || 0) / 100;
        if (i2) {
          var r2 = $(C(e2, t2) - i2 / 2), n2 = 0, o2 = t2.highlights.length, a2 = (t2.maxValue - t2.minValue) / t2.ticksAngle;
          for (e2.save(); n2 < o2; n2++) {
            var l2 = t2.highlights[n2];
            e2.beginPath(), e2.rotate(re), e2.arc(0, 0, r2, te.radians(t2.startAngle + (l2.from - t2.minValue) / a2), te.radians(t2.startAngle + (l2.to - t2.minValue) / a2), false), e2.strokeStyle = l2.color, e2.lineWidth = i2, e2.lineCap = t2.highlightsLineCap, e2.stroke(), e2.closePath(), e2.restore(), e2.save();
          }
        }
      }
      function V(e2, t2) {
        var i2 = C(e2, t2), r2 = void 0, n2 = void 0, o2 = void 0, a2 = 0, l2 = 0, s2 = Math.abs(t2.minorTicks) || 0, d2 = t2.ticksAngle / (t2.maxValue - t2.minValue);
        for (e2.lineWidth = H.pixelRatio, e2.strokeStyle = t2.colorMinorTicks || t2.colorStrokeTicks, e2.save(), t2.exactTicks ? (n2 = t2.maxValue - t2.minValue, r2 = s2 ? n2 / s2 : 0, l2 = (Q.mod(t2.majorTicks[0], s2) || 0) * d2) : r2 = s2 * (t2.majorTicks.length - 1); a2 < r2; ++a2) (o2 = t2.startAngle + l2 + a2 * (t2.ticksAngle / r2)) <= t2.ticksAngle + t2.startAngle && (e2.rotate(te.radians(o2)), e2.beginPath(), e2.moveTo(0, i2), e2.lineTo(0, i2 - 0.075 * e2.max), j(e2));
      }
      function C(e2, t2) {
        var i2 = e2.max / 100;
        return S(e2, t2) - 5 * i2 - (t2.barWidth ? 2 * (parseFloat(t2.barStrokeWidth) || 0) + ((parseFloat(t2.barWidth) || 0) + 5) * i2 : 0);
      }
      function P(e2, t2) {
        te.prepareTicks(t2);
        var i2 = $(C(e2, t2)), r2 = void 0, n2 = void 0, o2 = t2.majorTicks.length, a2 = H.pixelRatio;
        for (e2.lineWidth = 2 * a2, e2.save(), n2 = t2.colorMajorTicks instanceof Array ? t2.colorMajorTicks : new Array(o2).fill(t2.colorStrokeTicks || t2.colorMajorTicks), r2 = 0; r2 < o2; ++r2) e2.strokeStyle = n2[r2], e2.rotate(te.radians(N(t2, t2.exactTicks ? t2.majorTicks[r2] : r2, o2))), e2.beginPath(), e2.moveTo(0, i2), e2.lineTo(0, i2 - 0.15 * e2.max), j(e2);
        t2.strokeTicks && (e2.strokeStyle = t2.colorStrokeTicks || n2[0], e2.rotate(re), e2.beginPath(), e2.arc(0, 0, i2, te.radians(t2.startAngle), te.radians(t2.startAngle + t2.ticksAngle), false), j(e2));
      }
      function N(e2, t2, i2) {
        if (e2.exactTicks) {
          var r2 = e2.ticksAngle / (e2.maxValue - e2.minValue);
          return e2.startAngle + r2 * (t2 - e2.minValue);
        }
        return e2.startAngle + t2 * (e2.ticksAngle / (i2 - 1));
      }
      function j(e2) {
        e2.stroke(), e2.restore(), e2.closePath(), e2.save();
      }
      function M(e2, t2) {
        var i2 = C(e2, t2) - 0.15 * e2.max, r2 = {}, n2 = 0, o2 = t2.majorTicks.length, a2 = "needle" !== t2.animationTarget, l2 = t2.colorNumbers instanceof Array ? t2.colorNumbers : new Array(o2).fill(t2.colorNumbers), s2 = a2 ? -(t2.value - t2.minValue) / (t2.maxValue - t2.minValue) * t2.ticksAngle : 0;
        for (a2 && (e2.save(), e2.rotate(-te.radians(s2))), e2.font = te.font(t2, "Numbers", e2.max / 200), e2.lineWidth = 0, e2.textAlign = "center", e2.textBaseline = "middle"; n2 < o2; ++n2) {
          var d2 = s2 + N(t2, t2.exactTicks ? t2.majorTicks[n2] : n2, o2), u2 = e2.measureText(t2.majorTicks[n2]).width, c2 = t2.fontNumbersSize, h2 = Math.sqrt(u2 * u2 + c2 * c2) / 2, f2 = te.radialPoint(i2 - h2 - t2.numbersMargin / 100 * e2.max, te.radians(d2));
          360 === d2 && (d2 = 0), r2[d2] || (r2[d2] = true, e2.fillStyle = l2[n2], e2.fillText(t2.majorTicks[n2], f2.x, f2.y));
        }
        a2 && e2.restore();
      }
      function B(e2, t2) {
        t2.title && (e2.save(), e2.font = te.font(t2, "Title", e2.max / 200), e2.fillStyle = t2.colorTitle, e2.textAlign = "center", e2.fillText(t2.title, 0, -e2.max / 4.25, 0.8 * e2.max), e2.restore());
      }
      function W(e2, t2) {
        t2.units && (e2.save(), e2.font = te.font(t2, "Units", e2.max / 200), e2.fillStyle = t2.colorUnits, e2.textAlign = "center", e2.fillText(te.formatContext(t2, t2.units), 0, e2.max / 3.25, 0.8 * e2.max), e2.restore());
      }
      function _(e2, t2) {
        if (t2.needle) {
          var i2 = t2.ticksAngle < 360 ? te.normalizedValue(t2).indented : t2.value, r2 = h2 ? t2.startAngle : t2.startAngle + (i2 - t2.minValue) / (t2.maxValue - t2.minValue) * t2.ticksAngle;
          "right" === t2.barStartPosition && (r2 = t2.startAngle + t2.ticksAngle - (i2 - t2.minValue) / (t2.maxValue - t2.minValue) * t2.ticksAngle);
          var n2 = S(e2, t2), o2 = $(n2 / 100 * t2.needleCircleSize), a2 = $(n2 / 100 * t2.needleCircleSize * 0.75), l2 = $(n2 / 100 * t2.needleEnd), s2 = $(t2.needleStart ? n2 / 100 * t2.needleStart : 0), d2 = n2 / 100 * t2.needleWidth, u2 = n2 / 100 * t2.needleWidth / 2, c2 = H.pixelRatio, h2 = "needle" !== t2.animationTarget;
          e2.save(), te.drawNeedleShadow(e2, t2), e2.rotate(te.radians(r2)), e2.fillStyle = te.linearGradient(e2, t2.colorNeedle, t2.colorNeedleEnd, l2 - s2), "arrow" === t2.needleType ? (e2.beginPath(), e2.moveTo(-u2, -s2), e2.lineTo(-d2, 0), e2.lineTo(-1 * c2, l2), e2.lineTo(c2, l2), e2.lineTo(d2, 0), e2.lineTo(u2, -s2), e2.closePath(), e2.fill(), e2.beginPath(), e2.lineTo(-0.5 * c2, l2), e2.lineTo(-1 * c2, l2), e2.lineTo(-d2, 0), e2.lineTo(-u2, -s2), e2.lineTo(u2 / 2 * c2 - 2 * c2, -s2), e2.closePath(), e2.fillStyle = t2.colorNeedleShadowUp, e2.fill()) : (e2.beginPath(), e2.moveTo(-u2, l2), e2.lineTo(-u2, s2), e2.lineTo(u2, s2), e2.lineTo(u2, l2), e2.closePath(), e2.fill()), t2.needleCircleSize && (e2.restore(), te.drawNeedleShadow(e2, t2), t2.needleCircleOuter && (e2.beginPath(), e2.arc(0, 0, o2, 0, 2 * ie, true), e2.fillStyle = te.linearGradient(e2, t2.colorNeedleCircleOuter, t2.colorNeedleCircleOuterEnd, o2), e2.fill(), e2.closePath()), t2.needleCircleInner && (e2.beginPath(), e2.arc(0, 0, a2, 0, 2 * ie, true), e2.fillStyle = te.linearGradient(e2, t2.colorNeedleCircleInner, t2.colorNeedleCircleInnerEnd, a2), e2.fill(), e2.closePath()), e2.restore());
        }
      }
      function E(e2, t2, i2) {
        te.drawValueBox(e2, t2, i2, 0, e2.max - 0.33 * e2.max, e2.max);
      }
      function R(e2) {
        var t2 = e2.startAngle, i2 = e2.startAngle + e2.ticksAngle, r2 = t2, n2 = t2 + (te.normalizedValue(e2).normal - e2.minValue) / (e2.maxValue - e2.minValue) * e2.ticksAngle;
        if ("middle" === e2.barStartPosition) {
          var o2 = 0.5 * (e2.minValue + e2.maxValue);
          e2.value < o2 ? (r2 = 180 - (o2 - te.normalizedValue(e2).normal) / (e2.maxValue - e2.minValue) * e2.ticksAngle, n2 = 180) : (r2 = 180, n2 = 180 + (te.normalizedValue(e2).normal - o2) / (e2.maxValue - e2.minValue) * e2.ticksAngle);
        } else "right" === e2.barStartPosition && (r2 = i2 - n2 + t2, n2 = i2);
        return { startAngle: r2, endAngle: n2 };
      }
      function I(e2, t2) {
        var i2 = e2.max / 100, r2 = S(e2, t2) - 5 * i2, n2 = parseFloat(t2.barStrokeWidth + "") || 0, o2 = (parseFloat(t2.barWidth + "") || 0) * i2, a2 = r2 - 2 * n2 - o2, l2 = (r2 - a2) / 2, s2 = a2 + l2, d2 = n2 / s2, u2 = t2.startAngle, c2 = t2.startAngle + t2.ticksAngle;
        if (e2.save(), e2.rotate(re), n2 && (e2.beginPath(), e2.arc(0, 0, s2, te.radians(u2) - d2, te.radians(c2) + d2, false), e2.strokeStyle = t2.colorBarStroke, e2.lineWidth = 2 * l2, e2.stroke(), e2.closePath()), o2 && (e2.beginPath(), e2.arc(0, 0, s2, te.radians(u2), te.radians(c2), false), e2.strokeStyle = t2.colorBar, e2.lineWidth = o2, e2.stroke(), e2.closePath(), t2.barShadow && (e2.beginPath(), e2.arc(0, 0, r2, te.radians(u2), te.radians(c2), false), e2.clip(), e2.beginPath(), e2.strokeStyle = t2.colorBar, e2.lineWidth = 1, e2.shadowBlur = t2.barShadow, e2.shadowColor = t2.colorBarShadow, e2.shadowOffsetX = 0, e2.shadowOffsetY = 0, e2.arc(0, 0, r2, te.radians(t2.startAngle), te.radians(t2.startAngle + t2.ticksAngle), false), e2.stroke(), e2.closePath(), e2.restore(), e2.rotate(re)), t2.barProgress)) {
          var h2 = R(t2), f2 = h2.startAngle, v2 = h2.endAngle;
          e2.beginPath(), e2.arc(0, 0, s2, te.radians(f2), te.radians(v2), false), e2.strokeStyle = t2.colorBarProgress, e2.lineWidth = o2, e2.stroke(), e2.closePath();
        }
        e2.restore();
      }
      function z(e2) {
        return e2.options.animatedValue ? e2.options.value : e2.value;
      }
      var D = function e2(t2, i2, r2) {
        null === t2 && (t2 = Function.prototype);
        var n2 = Object.getOwnPropertyDescriptor(t2, i2);
        if (void 0 === n2) {
          var o2 = Object.getPrototypeOf(t2);
          return null === o2 ? void 0 : e2(o2, i2, r2);
        }
        if ("value" in n2) return n2.value;
        var a2 = n2.get;
        if (void 0 !== a2) return a2.call(r2);
      }, F = function e2(t2, i2, r2, n2) {
        var o2 = Object.getOwnPropertyDescriptor(t2, i2);
        if (void 0 === o2) {
          var a2 = Object.getPrototypeOf(t2);
          null !== a2 && e2(a2, i2, r2, n2);
        } else if ("value" in o2 && o2.writable) o2.value = r2;
        else {
          var l2 = o2.set;
          void 0 !== l2 && l2.call(n2, r2);
        }
        return r2;
      }, G = /* @__PURE__ */ function() {
        function e2(e3, t2) {
          for (var i2 = 0; i2 < t2.length; i2++) {
            var r2 = t2[i2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
          }
        }
        return function(t2, i2, r2) {
          return i2 && e2(t2.prototype, i2), r2 && e2(t2, r2), t2;
        };
      }();
      Object.assign || Object.defineProperty(Object, "assign", { enumerable: false, configurable: true, writable: true, value: function(e2, t2) {
        if (void 0 === e2 || null === e2) throw new TypeError("Cannot convert first argument to object");
        for (var i2 = Object(e2), r2 = 1; r2 < arguments.length; r2++) {
          var n2 = arguments[r2];
          if (void 0 !== n2 && null !== n2) for (var o2 = Object.keys(Object(n2)), a2 = 0, l2 = o2.length; a2 < l2; a2++) {
            var s2 = o2[a2], d2 = Object.getOwnPropertyDescriptor(n2, s2);
            void 0 !== d2 && d2.enumerable && (i2[s2] = n2[s2]);
          }
        }
        return i2;
      } }), Array.prototype.indexOf || Object.defineProperty(Array.prototype, "indexOf", { value: function(e2, t2) {
        var i2;
        if (null === this) throw new TypeError('"this" is null or not defined');
        var r2 = Object(this), n2 = r2.length >>> 0;
        if (0 === n2) return -1;
        var o2 = +t2 || 0;
        if (Math.abs(o2) === 1 / 0 && (o2 = 0), o2 >= n2) return -1;
        for (i2 = Math.max(o2 >= 0 ? o2 : n2 - Math.abs(o2), 0); i2 < n2; ) {
          if (i2 in r2 && r2[i2] === e2) return i2;
          i2++;
        }
        return -1;
      } }), Array.prototype.fill || Object.defineProperty(Array.prototype, "fill", { value: function(e2) {
        if (null === this) throw new TypeError("this is null or not defined");
        for (var t2 = Object(this), i2 = t2.length >>> 0, r2 = arguments[1], n2 = r2 >> 0, o2 = n2 < 0 ? Math.max(i2 + n2, 0) : Math.min(n2, i2), a2 = arguments[2], l2 = void 0 === a2 ? i2 : a2 >> 0, s2 = l2 < 0 ? Math.max(i2 + l2, 0) : Math.min(l2, i2); o2 < s2; ) t2[o2] = e2, o2++;
        return t2;
      } }), "undefined" == typeof window && (window = "undefined" == typeof global ? {} : global);
      var L = function() {
        function e2() {
          r(this, e2), this._events = {}, this.addListener = this.on, this.removeListener = this.off;
        }
        return G(e2, [{ key: "emit", value: function(e3) {
          if (this._events[e3]) {
            for (var t2 = 0, i2 = this._events[e3].length, r2 = arguments.length, n2 = Array(r2 > 1 ? r2 - 1 : 0), o2 = 1; o2 < r2; o2++) n2[o2 - 1] = arguments[o2];
            for (; t2 < i2; t2++) this._events[e3][t2] && this._events[e3][t2].apply(this, n2);
          }
        } }, { key: "once", value: function(e3) {
          for (var t2 = arguments.length, i2 = Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++) i2[r2 - 1] = arguments[r2];
          for (var n2 = 0, o2 = i2.length, a2 = this; n2 < o2; n2++) !function() {
            var t3 = i2[n2], r3 = function i3() {
              a2.off(e3, i3), t3.apply(a2, arguments);
            };
            i2[n2] = r3;
          }();
          this.on.apply(this, [e3].concat(i2));
        } }, { key: "on", value: function(e3) {
          this._events[e3] || (this._events[e3] = []);
          for (var t2 = 0, i2 = arguments.length <= 1 ? 0 : arguments.length - 1; t2 < i2; t2++) this._events[e3].push(arguments.length <= t2 + 1 ? void 0 : arguments[t2 + 1]);
        } }, { key: "off", value: function(e3) {
          if (this._events[e3]) for (var t2 = 0, i2 = arguments.length <= 1 ? 0 : arguments.length - 1; t2 < i2; t2++) for (var r2 = arguments.length <= t2 + 1 ? void 0 : arguments[t2 + 1], n2 = void 0; ~(n2 = this._events[e3].indexOf(r2)); ) this._events[e3].splice(n2, 1);
        } }, { key: "removeAllListeners", value: function(e3) {
          delete this._events[e3];
        } }, { key: "listeners", get: function() {
          return this._events;
        } }]), e2;
      }(), U = n("requestAnimationFrame") || function(e2) {
        return setTimeout(function() {
          return e2((/* @__PURE__ */ new Date()).getTime());
        }, 1e3 / 60);
      }, q = { linear: function(e2) {
        return e2;
      }, quad: function(e2) {
        return Math.pow(e2, 2);
      }, dequad: function(e2) {
        return 1 - q.quad(1 - e2);
      }, quint: function(e2) {
        return Math.pow(e2, 5);
      }, dequint: function(e2) {
        return 1 - Math.pow(1 - e2, 5);
      }, cycle: function(e2) {
        return 1 - Math.sin(Math.acos(e2));
      }, decycle: function(e2) {
        return Math.sin(Math.acos(1 - e2));
      }, bounce: function(e2) {
        return 1 - q.debounce(1 - e2);
      }, debounce: function(e2) {
        for (var t2 = 0, i2 = 1; 1; t2 += i2, i2 /= 2) if (e2 >= (7 - 4 * t2) / 11) return -Math.pow((11 - 6 * t2 - 11 * e2) / 4, 2) + Math.pow(i2, 2);
      }, elastic: function(e2) {
        return 1 - q.delastic(1 - e2);
      }, delastic: function(e2) {
        return Math.pow(2, 10 * (e2 - 1)) * Math.cos(20 * Math.PI * 1.5 / 3 * e2);
      } }, X = function() {
        function e2() {
          var t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "linear", i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 250, n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function() {
          }, o2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : function() {
          };
          if (r(this, e2), this.duration = i2, this.rule = t2, this.draw = n2, this.end = o2, "function" != typeof this.draw) throw new TypeError("Invalid animation draw callback:", n2);
          if ("function" != typeof this.end) throw new TypeError("Invalid animation end callback:", o2);
        }
        return G(e2, [{ key: "animate", value: function(e3, t2) {
          var i2 = this;
          this.frame && this.cancel();
          var r2 = window.performance && window.performance.now ? window.performance.now() : n("animationStartTime") || Date.now();
          e3 = e3 || this.draw, t2 = t2 || this.end, this.draw = e3, this.end = t2, this.frame = U(function(n2) {
            return o(n2, e3, r2, q[i2.rule] || i2.rule, i2.duration, t2, i2);
          });
        } }, { key: "cancel", value: function() {
          if (this.frame) {
            (n("cancelAnimationFrame") || function(e3) {
            })(this.frame), this.frame = null;
          }
        } }, { key: "destroy", value: function() {
          this.cancel(), this.draw = null, this.end = null;
        } }]), e2;
      }();
      X.rules = q;
      var Y = function() {
        function t2(i2, n2, o2) {
          r(this, t2), this.options = i2, this.element = n2.toLowerCase(), this.type = t2.toDashed(o2), this.Type = e[o2], this.mutationsObserved = false, this.isObservable = !!window.MutationObserver, window.GAUGES_NO_AUTO_INIT || t2.domReady(this.traverse.bind(this));
        }
        return G(t2, [{ key: "isValidNode", value: function(e2) {
          return !(!e2.tagName || e2.tagName.toLowerCase() !== this.element || e2.getAttribute("data-type") !== this.type);
        } }, { key: "traverse", value: function() {
          for (var e2 = document.getElementsByTagName(this.element), t3 = 0, i2 = e2.length; t3 < i2; t3++) this.process(e2[t3]);
          this.isObservable && !this.mutationsObserved && (new MutationObserver(this.observe.bind(this)).observe(document.body, { childList: true, subtree: true, attributes: true, characterData: true, attributeOldValue: true, characterDataOldValue: true }), this.mutationsObserved = true);
        } }, { key: "observe", value: function(e2) {
          for (var t3 = 0, i2 = e2.length; t3 < i2; t3++) {
            var r2 = e2[t3];
            if ("attributes" === r2.type && "data-type" === r2.attributeName && this.isValidNode(r2.target) && r2.oldValue !== this.type) setTimeout(this.process.bind(this, r2.target));
            else if (r2.addedNodes && r2.addedNodes.length) for (var n2 = 0, o2 = r2.addedNodes.length; n2 < o2; n2++) setTimeout(this.process.bind(this, r2.addedNodes[n2]));
          }
        } }, { key: "process", value: function(e2) {
          var i2 = this;
          if (!this.isValidNode(e2)) return null;
          var r2 = void 0, n2 = JSON.parse(JSON.stringify(this.options)), o2 = null;
          for (r2 in n2) if (n2.hasOwnProperty(r2)) {
            var a2 = t2.toAttributeName(r2), l2 = t2.parse(e2.getAttribute(a2));
            null !== l2 && void 0 !== l2 && (n2[r2] = l2);
          }
          return n2.renderTo = e2, o2 = new this.Type(n2), o2.draw && o2.draw(), this.isObservable ? (o2.observer = new MutationObserver(function(r3) {
            r3.forEach(function(r4) {
              if ("attributes" === r4.type) {
                var n3 = r4.attributeName.toLowerCase(), a3 = e2.getAttribute(n3).toLowerCase();
                if ("data-type" === n3 && a3 && a3 !== i2.type) o2.observer.disconnect(), delete o2.observer, o2.destroy && o2.destroy();
                else if ("data-" === n3.substr(0, 5)) {
                  var l3 = n3.substr(5).split("-").map(function(e3, t3) {
                    return t3 ? e3.charAt(0).toUpperCase() + e3.substr(1) : e3;
                  }).join(""), s2 = {};
                  s2[l3] = t2.parse(e2.getAttribute(r4.attributeName)), "value" === l3 ? o2 && (o2.value = s2[l3]) : o2.update && o2.update(s2);
                }
              }
            });
          }), o2.observer.observe(e2, { attributes: true }), o2) : o2;
        } }], [{ key: "parse", value: function(e2) {
          if ("true" === e2) return true;
          if ("false" === e2) return false;
          if ("undefined" !== e2) {
            if ("null" === e2) return null;
            if (/^[-+#.\w\d\s]+(?:,[-+#.\w\d\s]*)+$/.test(e2)) return e2.split(",");
            try {
              return JSON.parse(e2);
            } catch (e3) {
            }
            return e2;
          }
        } }, { key: "toDashed", value: function(e2) {
          for (var t3 = e2.split(/(?=[A-Z])/), i2 = 1, r2 = t3.length, n2 = t3[0].toLowerCase(); i2 < r2; i2++) n2 += "-" + t3[i2].toLowerCase();
          return n2;
        } }, { key: "toCamelCase", value: function(e2) {
          for (var t3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = e2.split(/-/), r2 = 0, n2 = i2.length, o2 = ""; r2 < n2; r2++) o2 += r2 || t3 ? i2[r2][0].toUpperCase() + i2[r2].substr(1).toLowerCase() : i2[r2].toLowerCase();
          return o2;
        } }, { key: "toAttributeName", value: function(e2) {
          return "data-" + t2.toDashed(e2);
        } }, { key: "domReady", value: function(e2) {
          if (/comp|inter|loaded/.test((window.document || {}).readyState + "")) return e2();
          window.addEventListener ? window.addEventListener("DOMContentLoaded", e2, false) : window.attachEvent && window.attachEvent("onload", e2);
        } }]), t2;
      }(), H = function() {
        function e2(t2, i2, n2) {
          r(this, e2), e2.collection.push(this), this.width = i2 || 0, this.height = n2 || 0, this.element = t2, this.init();
        }
        return G(e2, [{ key: "init", value: function() {
          var t2 = e2.pixelRatio;
          this.element.width = this.width * t2, this.element.height = this.height * t2, this.element.style.width = this.width + "px", this.element.style.height = this.height + "px", this.elementClone = this.element.cloneNode(true), this.context = this.element.getContext("2d"), this.contextClone = this.elementClone.getContext("2d"), this.drawWidth = this.element.width, this.drawHeight = this.element.height, this.drawX = this.drawWidth / 2, this.drawY = this.drawHeight / 2, this.minSide = this.drawX < this.drawY ? this.drawX : this.drawY, this.elementClone.initialized = false, this.contextClone.translate(this.drawX, this.drawY), this.contextClone.save(), this.context.translate(this.drawX, this.drawY), this.context.save(), this.context.max = this.contextClone.max = this.minSide, this.context.maxRadius = this.contextClone.maxRadius = null;
        } }, { key: "destroy", value: function() {
          var t2 = e2.collection.indexOf(this);
          ~t2 && e2.collection.splice(t2, 1), this.context.clearRect(-this.drawX, -this.drawY, this.drawWidth, this.drawHeight), this.context.max = null, delete this.context.max, this.context.maxRadius = null, delete this.context.maxRadius, this.context = null, this.contextClone = null, this.elementClone = null, this.element = null, this.onRedraw = null;
        } }, { key: "commit", value: function() {
          var t2 = e2.pixelRatio;
          return 1 !== t2 && (this.contextClone.scale(t2, t2), this.contextClone.save()), this;
        } }, { key: "redraw", value: function() {
          return this.init(), this.onRedraw && this.onRedraw(), this;
        } }], [{ key: "redraw", value: function() {
          for (var t2 = 0, i2 = e2.collection.length; t2 < i2; t2++) e2.collection[t2].redraw();
        } }, { key: "pixelRatio", get: function() {
          return window.devicePixelRatio || 1;
        } }]), e2;
      }();
      H.collection = [], window.matchMedia && window.matchMedia("screen and (min-resolution: 2dppx)").addListener(H.redraw);
      var J = { renderTo: null, width: 0, height: 0, minValue: 0, maxValue: 100, value: 0, units: false, exactTicks: false, majorTicks: [0, 20, 40, 60, 80, 100], minorTicks: 10, strokeTicks: true, animatedValue: false, animateOnInit: false, title: false, borders: true, numbersMargin: 1, listeners: null, valueInt: 3, valueDec: 2, majorTicksInt: 1, majorTicksDec: 0, animation: true, animationDuration: 500, animationRule: "cycle", colorPlate: "#fff", colorPlateEnd: "", colorMajorTicks: "#444", colorMinorTicks: "#666", colorStrokeTicks: "", colorTitle: "#888", colorUnits: "#888", colorNumbers: "#444", colorNeedle: "rgba(240,128,128,1)", colorNeedleEnd: "rgba(255,160,122,.9)", colorValueText: "#444", colorValueTextShadow: "rgba(0,0,0,0.3)", colorBorderShadow: "rgba(0,0,0,0.5)", colorBorderOuter: "#ddd", colorBorderOuterEnd: "#aaa", colorBorderMiddle: "#eee", colorBorderMiddleEnd: "#f0f0f0", colorBorderInner: "#fafafa", colorBorderInnerEnd: "#ccc", colorValueBoxRect: "#888", colorValueBoxRectEnd: "#666", colorValueBoxBackground: "#babab2", colorValueBoxShadow: "rgba(0,0,0,1)", colorNeedleShadowUp: "rgba(2,255,255,0.2)", colorNeedleShadowDown: "rgba(188,143,143,0.45)", colorBarStroke: "#222", colorBar: "#ccc", colorBarProgress: "#888", colorBarShadow: "#000", fontNumbers: "Arial", fontTitle: "Arial", fontUnits: "Arial", fontValue: "Arial", fontNumbersSize: 20, fontTitleSize: 24, fontUnitsSize: 22, fontValueSize: 26, fontNumbersStyle: "normal", fontTitleStyle: "normal", fontUnitsStyle: "normal", fontValueStyle: "normal", fontNumbersWeight: "normal", fontTitleWeight: "normal", fontUnitsWeight: "normal", fontValueWeight: "normal", needle: true, needleShadow: true, needleType: "arrow", needleStart: 5, needleEnd: 85, needleWidth: 4, borderOuterWidth: 3, borderMiddleWidth: 3, borderInnerWidth: 3, borderShadowWidth: 3, valueBox: true, valueBoxStroke: 5, valueBoxWidth: 0, valueText: "", valueTextShadow: true, valueBoxBorderRadius: 2.5, highlights: [{ from: 20, to: 60, color: "#eee" }, { from: 60, to: 80, color: "#ccc" }, { from: 80, to: 100, color: "#999" }], highlightsWidth: 15, highlightsLineCap: "butt", barWidth: 20, barStrokeWidth: 0, barProgress: true, barShadow: 0 };
      a.prototype = Object.create(Array.prototype), a.prototype.constructor = a, a.prototype.get = function(e2) {
        if ("string" == typeof e2) for (var t2 = 0, i2 = this.length; t2 < i2; t2++) {
          var r2 = this[t2].options.renderTo.tagName ? this[t2].options.renderTo : document.getElementById(this[t2].options.renderTo || "");
          if (r2.getAttribute("id") === e2) return this[t2];
        }
        else if ("number" == typeof e2) return this[e2];
        return null;
      };
      var Z = "2.1.7", $ = (Math.round, Math.abs), K = new a();
      K.version = Z;
      var Q = function(n2) {
        function o2(i2) {
          r(this, o2);
          var n3 = t(this, (o2.__proto__ || Object.getPrototypeOf(o2)).call(this)), a2 = n3.constructor.name;
          if ("BaseGauge" === a2) throw new TypeError("Attempt to instantiate abstract class!");
          if (K.push(n3), i2.listeners && Object.keys(i2.listeners).forEach(function(e2) {
            (i2.listeners[e2] instanceof Array ? i2.listeners[e2] : [i2.listeners[e2]]).forEach(function(t2) {
              n3.on(e2, t2);
            });
          }), n3.version = Z, n3.type = e[a2] || o2, n3.initialized = false, i2.minValue = parseFloat(i2.minValue), i2.maxValue = parseFloat(i2.maxValue), i2.value = parseFloat(i2.value) || 0, i2.borders || (i2.borderInnerWidth = i2.borderMiddleWidth = i2.borderOuterWidth = 0), !i2.renderTo) throw TypeError("Canvas element was not specified when creating the Gauge object!");
          var l2 = i2.renderTo.tagName ? i2.renderTo : document.getElementById(i2.renderTo);
          if (!(l2 instanceof HTMLCanvasElement)) throw TypeError("Given gauge canvas element is invalid!");
          return i2.width = parseFloat(i2.width) || 0, i2.height = parseFloat(i2.height) || 0, i2.width && i2.height || (i2.width || (i2.width = l2.parentNode ? l2.parentNode.offsetWidth : l2.offsetWidth), i2.height || (i2.height = l2.parentNode ? l2.parentNode.offsetHeight : l2.offsetHeight)), n3.options = i2 || {}, n3.options.animateOnInit && (n3._value = n3.options.value, n3.options.value = n3.options.minValue), n3.canvas = new H(l2, i2.width, i2.height), n3.canvas.onRedraw = n3.draw.bind(n3), n3.animation = new X(i2.animationRule, i2.animationDuration), n3;
        }
        return i(o2, n2), G(o2, [{ key: "update", value: function(e2) {
          return Object.assign(this.options, this.type.configure(e2 || {})), this.canvas.width = this.options.width, this.canvas.height = this.options.height, this.animation.rule = this.options.animationRule, this.animation.duration = this.options.animationDuration, this.canvas.redraw(), this;
        } }, { key: "destroy", value: function() {
          var e2 = K.indexOf(this);
          ~e2 && K.splice(e2, 1), this.canvas.destroy(), this.canvas = null, this.animation.destroy(), this.animation = null, this.emit("destroy");
        } }, { key: "draw", value: function() {
          return this.options.animateOnInit && !this.initialized && (this.value = this._value, this.initialized = true, this.emit("init")), this.emit("render"), this;
        } }, { key: "value", set: function(e2) {
          var t2 = this;
          e2 = o2.ensureValue(e2, this.options.minValue);
          var i2 = this.options.value;
          if (e2 !== i2) if (this.options.animation) {
            if (this.animation.frame && (this.options.value = this._value, this._value === e2)) return this.animation.cancel(), void delete this._value;
            void 0 === this._value && (this._value = e2), this.emit("animationStart"), this.animation.animate(function(r2) {
              var n3 = i2 + (e2 - i2) * r2;
              t2.options.animatedValue && t2.emit("value", n3, t2.value), t2.options.value = n3, t2.draw(), t2.emit("animate", r2, t2.options.value);
            }, function() {
              void 0 !== t2._value && (t2.emit("value", t2._value, t2.value), t2.options.value = t2._value, delete t2._value), t2.draw(), t2.emit("animationEnd");
            });
          } else this.emit("value", e2, this.value), this.options.value = e2, this.draw();
        }, get: function() {
          return void 0 === this._value ? this.options.value : this._value;
        } }], [{ key: "configure", value: function(e2) {
          return e2;
        } }, { key: "initialize", value: function(e2, t2) {
          return new Y(t2, "canvas", e2);
        } }, { key: "fromElement", value: function(e2) {
          var t2 = Y.toCamelCase(e2.getAttribute("data-type")), i2 = e2.attributes, r2 = 0, n3 = i2.length, o3 = {};
          if (t2) {
            for (/Gauge$/.test(t2) || (t2 += "Gauge"); r2 < n3; r2++) o3[Y.toCamelCase(i2[r2].name.replace(/^data-/, ""), false)] = Y.parse(i2[r2].value);
            new Y(o3, e2.tagName, t2).process(e2);
          }
        } }, { key: "ensureValue", value: function(e2) {
          var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return e2 = parseFloat(e2), !isNaN(e2) && isFinite(e2) || (e2 = parseFloat(t2) || 0), e2;
        } }, { key: "mod", value: function(e2, t2) {
          return (e2 % t2 + t2) % t2;
        } }, { key: "version", get: function() {
          return Z;
        } }]), o2;
      }(L);
      void 0 !== e && (e.BaseGauge = Q, e.gauges = (window.document || {}).gauges = K);
      var ee = /{([_a-zA-Z]+[_a-zA-Z0-9]*)}/g, te = { roundRect: u, padValue: c, formatMajorTickNumber: h, radians: f, radialPoint: v, linearGradient: m, drawNeedleShadow: p, drawValueBox: x, verifyError: l, prepareTicks: d, drawShadow: g, font: w, normalizedValue: k, formatContext: s }, ie = Math.PI, re = ie / 2, ne = Object.assign({}, J, { ticksAngle: 270, startAngle: 45, colorNeedleCircleOuter: "#f0f0f0", colorNeedleCircleOuterEnd: "#ccc", colorNeedleCircleInner: "#e8e8e8", colorNeedleCircleInnerEnd: "#f5f5f5", needleCircleSize: 10, needleCircleInner: true, needleCircleOuter: true, needleStart: 20, animationTarget: "needle", useMinPath: false, barWidth: 0, barStartPosition: "left" }), oe = function(e2) {
        function n2(e3) {
          return r(this, n2), e3 = Object.assign({}, ne, e3 || {}), t(this, (n2.__proto__ || Object.getPrototypeOf(n2)).call(this, n2.configure(e3)));
        }
        return i(n2, e2), G(n2, [{ key: "draw", value: function() {
          try {
            var e3 = this.canvas, t2 = [-e3.drawX, -e3.drawY, e3.drawWidth, e3.drawHeight], i2 = t2[0], r2 = t2[1], o2 = t2[2], a2 = t2[3], l2 = this.options;
            if ("needle" === l2.animationTarget) {
              if (!e3.elementClone.initialized) {
                var s2 = e3.contextClone;
                s2.clearRect(i2, r2, o2, a2), s2.save(), this.emit("beforePlate"), O(s2, l2), this.emit("beforeHighlights"), A(s2, l2), this.emit("beforeMinorTicks"), V(s2, l2), this.emit("beforeMajorTicks"), P(s2, l2), this.emit("beforeNumbers"), M(s2, l2), this.emit("beforeTitle"), B(s2, l2), this.emit("beforeUnits"), W(s2, l2), e3.elementClone.initialized = true;
              }
              this.canvas.commit(), e3.context.clearRect(i2, r2, o2, a2), e3.context.save(), e3.context.drawImage(e3.elementClone, i2, r2, o2, a2), e3.context.save(), this.emit("beforeProgressBar"), I(e3.context, l2), this.emit("beforeValueBox"), E(e3.context, l2, z(this)), this.emit("beforeNeedle"), _(e3.context, l2);
            } else {
              var d2 = -te.radians((l2.value - l2.minValue) / (l2.maxValue - l2.minValue) * l2.ticksAngle);
              if (e3.context.clearRect(i2, r2, o2, a2), e3.context.save(), this.emit("beforePlate"), O(e3.context, l2), e3.context.rotate(d2), this.emit("beforeHighlights"), A(e3.context, l2), this.emit("beforeMinorTicks"), V(e3.context, l2), this.emit("beforeMajorTicks"), P(e3.context, l2), this.emit("beforeNumbers"), M(e3.context, l2), this.emit("beforeProgressBar"), I(e3.context, l2), e3.context.rotate(-d2), e3.context.save(), !e3.elementClone.initialized) {
                var u2 = e3.contextClone;
                u2.clearRect(i2, r2, o2, a2), u2.save(), this.emit("beforeTitle"), B(u2, l2), this.emit("beforeUnits"), W(u2, l2), this.emit("beforeNeedle"), _(u2, l2), e3.elementClone.initialized = true;
              }
              e3.context.drawImage(e3.elementClone, i2, r2, o2, a2);
            }
            this.emit("beforeValueBox"), E(e3.context, l2, z(this)), D(n2.prototype.__proto__ || Object.getPrototypeOf(n2.prototype), "draw", this).call(this);
          } catch (e4) {
            te.verifyError(e4);
          }
          return this;
        } }, { key: "value", set: function(e3) {
          e3 = Q.ensureValue(e3, this.options.minValue), this.options.animation && 360 === this.options.ticksAngle && this.options.useMinPath && (this._value = e3, e3 = this.options.value + ((e3 - this.options.value) % 360 + 540) % 360 - 180), F(n2.prototype.__proto__ || Object.getPrototypeOf(n2.prototype), "value", e3, this);
        }, get: function() {
          return D(n2.prototype.__proto__ || Object.getPrototypeOf(n2.prototype), "value", this);
        } }], [{ key: "configure", value: function(e3) {
          return e3.barWidth > 50 && (e3.barWidth = 50), isNaN(e3.startAngle) && (e3.startAngle = 45), isNaN(e3.ticksAngle) && (e3.ticksAngle = 270), e3.ticksAngle > 360 && (e3.ticksAngle = 360), e3.ticksAngle < 0 && (e3.ticksAngle = 0), e3.startAngle < 0 && (e3.startAngle = 0), e3.startAngle > 360 && (e3.startAngle = 360), e3;
        } }]), n2;
      }(Q);
      void 0 !== e && (e.RadialGauge = oe), Q.initialize("RadialGauge", ne), "undefined" != typeof module && Object.assign(e, { Collection: a, GenericOptions: J, Animation: X, BaseGauge: Q, drawings: te, SmartCanvas: H, DomObserver: Y, vendorize: n });
    }("undefined" != typeof module ? module.exports : window);
  }
});
export default require_gauge_min();
/*! Bundled license information:

canvas-gauges/gauge.min.js:
  (*!
   * The MIT License (MIT)
   * 
   * Copyright (c) 2016 Mykhailo Stadnyk <mikhus@gmail.com>
   * 
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * 
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *
   * @version 2.1.7
   *)
*/
//# sourceMappingURL=canvas-gauges.js.map
